# Generated by Django 2.2 on 2021-06-07 09:06

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
        ('mainapp', '0003_album'),
    ]

    operations = [
        migrations.CreateModel(
            name='SiteUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('avatar', models.ImageField(blank=True, upload_to='users_avatars')),
                ('age', models.PositiveIntegerField(blank=True, null=True, verbose_name='age')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email')),
                ('country', models.CharField(blank=True, max_length=128, null=True, verbose_name='country')),
                ('passwordYM', models.CharField(blank=True, max_length=1024, verbose_name='Yandex Music password')),
                ('emailYM', models.EmailField(blank=True, max_length=128, verbose_name='yandex Music email')),
                ('passwordSP', models.CharField(blank=True, max_length=1024, verbose_name='Spotify password')),
                ('idSP', models.CharField(blank=True, max_length=1024, verbose_name='Spotify user id')),
                ('clientIdSP', models.CharField(blank=True, max_length=1024, verbose_name='Spotify client id project')),
                ('clientSecretSP', models.CharField(blank=True, max_length=1024, null=True, verbose_name='Client secret Spotify project')),
                ('tokenAccessSP', models.CharField(blank=True, max_length=1024, null=True, verbose_name='Spotify access token')),
                ('tokenRefreshSP', models.CharField(blank=True, max_length=1024, null=True, verbose_name='Spotify refresh token')),
                ('tokenReserveSP', models.CharField(blank=True, max_length=1024, null=True, verbose_name='Spotify reserve token')),
                ('redirectUriSP', models.CharField(blank=True, max_length=1024, null=True, verbose_name='Spotify redirect uri project')),
                ('emailSP', models.EmailField(blank=True, max_length=128, null=True, verbose_name='Spotify email')),
                ('passwordVK', models.CharField(blank=True, max_length=1024, verbose_name='VK password')),
                ('idVK', models.CharField(blank=True, max_length=1024, verbose_name='VK id')),
                ('tokenVK', models.CharField(blank=True, max_length=1024, verbose_name='VK token')),
                ('emailVK', models.EmailField(blank=True, max_length=128, verbose_name='VK email')),
                ('numberVK', models.PositiveIntegerField(blank=True, null=True, verbose_name='VK number')),
                ('albums', models.ManyToManyField(blank=True, related_name='album_users', to='mainapp.Album', verbose_name='albums')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
